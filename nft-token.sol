
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

// This is class that describes you smart contract.
contract nfttoken {

    struct Token {
        string name;
        string galaxy;
        uint age;
        uint mass;

    }

    Token[] stars;
    mapping (uint => uint) tokenToOwner;
    mapping (uint => uint) tokenPrice;



    constructor() public {
        // check that contract's public key is set
        require(tvm.pubkey() != 0, 101);
        // Check that message has signature (msg.pubkey() is not zero) and message is signed with the owner's private key
        require(msg.pubkey() == tvm.pubkey(), 102);
        tvm.accept();
    }


    // Modifier that allows function to accept external call only if it was signed
    // with contract owner's public key.
    modifier tvmAccept {

		tvm.accept();
		_;
	}

    function createToken (string name, string galaxy, uint age, uint mass) public tvmAccept returns (uint) {

        for (uint i=stars.length; i>0; i--) {
            require(stars[i-1].name != name, 103);
        }

        stars.push (Token(name,galaxy,age,mass));
        tokenToOwner[stars.length-1]=msg.pubkey();

        return (stars.length-1); //returns token index


    }

    function getTokenById ( uint tokenIndex) public tvmAccept returns (string name, string galaxy, uint age, uint mass) {

        require(stars.length > tokenIndex, 103);
        name = stars[tokenIndex].name;
        galaxy = stars[tokenIndex].galaxy;
        age = stars[tokenIndex].age;
        mass = stars[tokenIndex].mass;

    }

    function getTokenByName (string name) public tvmAccept returns (string galaxy, uint age, uint mass) {

        galaxy = "";
        age=0;
        mass=0;

        for (uint i=stars.length; i>0; i--) {
            if (stars[i-1].name == name) {
                galaxy = stars[i-1].galaxy;
                age = stars[i-1].age;
                mass = stars[i-1].mass;
            }
        }

    }

    function getTokenOwner (uint tokenIndex) public tvmAccept returns (uint) {

        return tokenToOwner[tokenIndex];

    }

    function setTokenOwner (uint tokenIndex, uint newOwnerPubKey) public tvmAccept {

        require(tokenToOwner[tokenIndex] == msg.pubkey(), 101);
        tokenToOwner[tokenIndex] = newOwnerPubKey;

    }



    function setTokenPrice (uint tokenIndex, uint price) public tvmAccept {

        require(tokenToOwner[tokenIndex] == msg.pubkey(), 101);
        tokenPrice[tokenIndex] = price;

    }


    function getTokenPrice (uint tokenIndex) public tvmAccept returns (uint) {

        return (tokenPrice[tokenIndex]);

    }
}
